#!/bin/bash

# sed 主要是用来将数据进行选取、替换、删除、新増的命令。
# sed [选项] '[动作]' 文件名
#
#
# -n：一般 sed 命令会把所有数据都输出到屏幕上。如果加入此选项，则只会把经过 sed 命令处理的行输出到屏幕上；
# -e: 允许对输入数据应用多条 sed 命令编辑；
# -f 脚本文件名：从 sed 脚本中读入 sed 操作。和 awk 命令的 -f 选项非常类似；
# -r：在 sed 中支持扩展正则表达式；
# -i：用 sed 的修改结果直接修改读取数据的文件，而不是由屏幕输出动作；
#
#
# a \：追加，在当前行后添加一行或多行。当添加多行时，除最后一行外，每行末尾需要用“\”代表数据未完结；
# c \：行替换，用c后面的字符串替换原数据行。当替换多行时，除最后一行外，每行末尾需用“\”代表数据未完结；
# i \：插入，在当前行前插入一行或多行。当插入多行时，除最后一行外，每行末尾需要用“\”代表数据未完结；
#
#
# d：删除，删除指定的行；
# P：打印，输出指定的行；
# s：字符串替换，用一个字符串替换另一个字符串。格式为“行范围s/旧字串/新字串/g”（和Vim中的替换格式类似）；
sbstr="sb250"
result=
echo ${result:=$(echo $sbstr | sed -e 's/5//g' | sed -e 's/2//g')}

# 切割的结果，有可能被当成命令，那是因为编译器没找到合适的命令，在前面加上echo，就不会去找后面的麻烦

# sed -e表示-e：多点编辑，对每行处理时，可以有多个Script
# 而且也有管道符号 | ，就是相当于传递一个$()，
# -e表示编辑原来的文件，如果不加-e，可能没有编辑的效果

# 's/?/?/g'两个问号分别表示：旧 子 串 、 新 子 串，如果要删除，直接把新子串命令为空就是，也就是sed 's/x//g' x就是想要删除的字符
# 没加g说明在一行只替换第一个匹配到的字符串，有g表示这一行所有匹配到的字符串都进行替换。

# 1.30开发sed笔记
# 踩坑：正则表达式[0-9]是匹配0-9，但是要匹配0-100，就不能这么写了，[1-9][0-9]是匹配10-99
# 如果实在是不想一条语句写，写多条语句不就完了，sed又不会报错
# 比如要匹配0-10，就0-9写一条，10单独写一条

# 踩坑：等号= 是sed中的一条命令，所以如果要匹配等号，就不能像常规一样
# 下面是替换等号所在行数据的方案：通过在s前面加前置： /xxxx来锁定一行
testcode="viewdistance=8"
# 记得前面一定要加 / ！因为这个表示匹配这一行，锁定这一行
sed -i '/viewdistance/s/[0-9]/7/g' $testcode
echo $testcode

# 如何在sed中使用变量？用   '"${varieable}"'
sed -i 's/view-distance: 10/view-distance: '"${view_distance}"'/g' ./practice/spigot.yml
